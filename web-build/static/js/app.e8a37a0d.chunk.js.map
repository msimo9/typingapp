{"version":3,"sources":["hooks/keyListener.js","components/Information.js","redux/redux.js","components/ModalSlider.js","components/RadioButtons.js","components/TimerSlider.js","components/CheckboxTimer.js","components/ModalScreen.js","components/ToggleModalButton.js","components/Finished.js","components/TypingTest.js","App.js","index.js"],"names":["keyListener","callback","useState","keyPressed","setKeyPressed","useEffect","onKeyDown","key","length","onKeyUp","window","addEventListener","removeEventListener","styles","StyleSheet","create","container","position","top","width","justifyContent","alignItems","flexDirection","text","color","fontWeight","fontFamily","marginHorizontal","Information","props","useFonts","RobotoMono_100Thin","View","style","Text","wpm","errors","initalState","sliderValue","language","timer","timerValue","store","createStore","state","action","type","payload","langValue","wpmValue","parseInt","console","log","ModalSlider","initalSliderValue","useSelector","setSliderValue","dispatch","useDispatch","height","onValueChange","value","changeSliderValue","changeSliderV","step","minimumValue","maximumValue","minimumTrackTintColor","maximumTrackTintColor","tapToSeek","thumbTintColor","RadioButtons","initialLang","checked","setChecked","map","element","innerContainer","RadioButton","status","onPress","marginTop","TimerSlider","marginBottom","checkbox","CheckboxTimer","isChecked","setIsChecked","CheckBox","nestedView","left","Dimensions","get","borderRadius","backgroundColor","closeButton","right","ModalScreen","isVisible","visibility","modalContainer","TouchableOpacity","toggleModal","Ionicons","name","size","zIndex","toggleModalButton","opacity","bottom","ToggleModalButton","setVisibility","Finished","wordsContainer","flex","marginVertical","borderRightColor","borderWidth","words","fontSize","textinput","firstWord","TypingTest","setText","randomWords","setRandomWords","isReady","setIsReady","counter","setCounter","totalCounter","setTotalCounter","underline","setUnderline","hasStarted","setHasStarted","currentChar","setCurrentChar","setErrors","setWpm","typedWords","setTypedWords","hasFinished","setHasFinished","initialTimerValue","setCountdownTimer","numberOfWords","fetchString","getCurrentChar","charAt","fontsLoaded","fetch","mode","then","response","json","data","interval","setInterval","clearInterval","interval2","tempWpm","Math","floor","interval3","slice","substring","shift","getNewWord","item","index","textDecoration","registerRootComponent"],"mappings":"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","file":"static/js/app.e8a37a0d.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\n//arrow func with one argument callback (function passed as arg)\nconst keyListener = callback => {\n\n  const [keyPressed, setKeyPressed] = useState();\n\n  useEffect(() => {\n    const onKeyDown = ({key}) => {\n      if(key !== keyPressed && key.length === 1 || key !== keyPressed && key == \"Backspace\"){\n        setKeyPressed(key);\n        callback(key);\n      }\n    }\n\n    const onKeyUp = () => {\n      setKeyPressed(null);\n    }\n\n    window.addEventListener(\"keydown\", onKeyDown);\n    window.addEventListener(\"keyup\", onKeyUp);\n\n    return () => {\n      window.removeEventListener(\"keydown\", onKeyDown);\n      window.removeEventListener(\"keyup\", onKeyUp);\n    };\n\n  });\n\n  return keyPressed;\n}\n\nexport default keyListener;","import { StyleSheet, Text, View } from 'react-native';\nimport React from 'react';\nimport { useFonts, RobotoMono_100Thin } from '@expo-google-fonts/roboto-mono';\n\nconst Information = props => {\n    let [fontsLoaded] = useFonts({\n        RobotoMono_100Thin,\n    });\n\n    return (\n        <View style={styles.container}>\n        <Text style={styles.text}>WPM: {props.wpm}</Text>\n        <Text style={styles.text}>Errors: {props.errors}</Text>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container:{\n        position: \"absolute\",\n        top:30,\n        width: \"30%\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        flexDirection: \"row\",\n    },\n    text:{\n        color: \"white\",\n        fontWeight: 500,\n        fontFamily: 'RobotoMono_100Thin',\n        marginHorizontal: 5,\n    }\n});\n\n\nexport default Information;","import { createStore } from 'redux'\n\nexport const SLIDER_VALUE = 'SLIDER_VALUE';\nexport const LANGUAGE = 'LANGUAGE';\nexport const CHANGE_WPM = 'CHANGE_WPM';\nexport const ERRORS = 'ERRORS';\nexport const CHANGE_TIMER = 'CHANGE_TIMER';\nexport const CHANGE_TIMER_VALUE = 'CHANGE_TIMER_VALUE';\n\nconst initalState = {\n    sliderValue: 30,\n    language: \"en\",\n    wpm: 0,\n    errors: 0,\n    timer: false,\n    timerValue: 60,\n}\n\nexport const changeTimer = () => ({\n    type: 'CHANGE_TIMER',\n});\n\nexport const changeTimerValue = (timerValue) => ({\n    type: 'CHANGE_TIMER_VALUE',\n    payload: {timerValue},\n});\n\nexport const changeSliderValue = (sliderValue) => ({\n    type: 'SLIDER_VALUE',\n    payload: {sliderValue}\n});\n\nexport const changeLanguage = (langValue) => ({\n    type: 'LANGUAGE',\n    payload: {langValue}\n});\n\nexport const changeWpm = (wpmValue) => ({\n    type:'CHANGE_WPM',\n    payload: {wpmValue}\n});\n\nexport const incrementErrors = () => ({\n    type: 'ERRORS'\n});\n\nexport const rootReducer = (state = initalState, action) => {\n    switch(action.type){\n        case SLIDER_VALUE:\n            return{\n                ...state,\n                sliderValue: action.payload.sliderValue\n            }\n        case LANGUAGE:\n            return{\n                ...state,\n                language: action.payload.langValue\n            }\n        case CHANGE_WPM:\n            return{\n                ...state,\n                wpm: action.payload.wpmValue\n            }\n        case ERRORS:\n            return{\n                ...state,\n                errors: parseInt(state.errors)+1\n            }\n        case CHANGE_TIMER:\n            return{\n                ...state,\n                timer: !state.timer,\n            }\n        case CHANGE_TIMER_VALUE:\n            console.log(\"redux timer value: \",action.payload.timerValue)\n            return{\n                ...state,\n                timerValue: action.payload.timerValue,\n            }\n        default:\n            return state\n    }\n}\n\n\nconst store = createStore(rootReducer);\n\nexport default store;\n\n\n\n\n\n\n\n","import {StyleSheet, ScrollView, View, Text, TouchableOpacity, Dimensions} from 'react-native';\nimport React, { useEffect, useState } from 'react';\nimport Slider from '@react-native-community/slider';\nimport { useFonts, RobotoMono_100Thin } from '@expo-google-fonts/roboto-mono';\nimport { changeSliderValue } from '../redux/redux';\nimport {useSelector, useDispatch} from 'react-redux';\n\nconst ModalSlider = () => {\n    const [scrollEnabled, setScroll] = useState(true);\n    const values = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100];\n\n    const initalSliderValue = useSelector(state => state.sliderValue);\n    const [sliderValue, setSliderValue] = useState(initalSliderValue);\n\n    const dispatch = useDispatch();\n    const changeSliderV = (value) => {\n        dispatch(changeSliderValue(value));\n        setSliderValue(value);\n    }\n\n    let [fontsLoaded] = useFonts({\n        RobotoMono_100Thin,\n    });\n\n    return (\n        <View style={styles.container}>\n            <Text style={styles.text}>number of words</Text>\n\n            <Slider\n                style={{width: 200, height: 40}}\n                onValueChange={value => changeSliderV(value)}\n                value={sliderValue}\n                step={10}\n                minimumValue={10}\n                maximumValue={100}\n                minimumTrackTintColor=\"#00ADB5\"\n                maximumTrackTintColor=\"#303841\"\n                tapToSeek={true}\n                thumbTintColor={\"#00ADB5\"}\n            />\n\n            <Text style={styles.text}>{sliderValue}</Text>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container:{\n\n    },\n    text:{\n        fontFamily: 'RobotoMono_100Thin',\n        color: \"white\",\n    },\n})\n\nexport default ModalSlider;","import { StyleSheet, Text, View } from 'react-native';\nimport * as React from 'react';\nimport { RadioButton } from 'react-native-paper';\nimport {useState} from 'react';\nimport { useFonts, RobotoMono_100Thin } from '@expo-google-fonts/roboto-mono';\nimport {useSelector, useDispatch} from 'react-redux';\nimport { changeLanguage } from '../redux/redux';\n\nexport default function RadioButtons() {\n    const initialLang = useSelector(state => state.language);\n    const [checked, setChecked] = useState(initialLang);\n\n    let [fontsLoaded] = useFonts({\n        RobotoMono_100Thin,\n    });\n\n    const dispatch = useDispatch();\n    const changeCheckedValue = (value) =>{\n        setChecked(value);\n        dispatch(changeLanguage(value));\n    }\n\n    const langs = [\"en\", \"de\", \"es\", \"zh\"];\n\n    return (\n        <View style={styles.container}>\n            <Text style={styles.text}>language</Text>\n\n            {langs.map(element => {\n                return(\n                    <View style={styles.innerContainer}>\n                        <RadioButton\n                            value={element}\n                            status={checked === element ? \"checked\" : \"unchecked\"}\n                            onPress={() => changeCheckedValue(element)}\n                        />\n                        <Text style={styles.text}>{element}</Text>\n                    </View>\n                );\n            })}\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container:{\n        marginTop: 50,\n        width: 200,\n    },\n    innerContainer:{\n        flexDirection: \"row\",\n        alignItems: \"center\"\n    },\n    text:{\n        fontFamily: 'RobotoMono_100Thin',\n        color: \"white\",\n    },\n})","import { StyleSheet, Text, View } from 'react-native'\nimport React, {useState, useEffect} from 'react'\nimport {useSelector, useDispatch} from 'react-redux';\nimport Slider from '@react-native-community/slider';\nimport { useFonts, RobotoMono_100Thin } from '@expo-google-fonts/roboto-mono';\nimport { changeTimerValue } from '../redux/redux';\n\nconst TimerSlider = () => {\n\n    const [sliderValue, setSliderValue] = useState(useSelector(state => state.timerValue))\n\n    let [fontsLoaded] = useFonts({\n        RobotoMono_100Thin,\n    });\n\n    const dispatch = useDispatch();\n    const changeSliderV = (value) => {\n        setSliderValue(value);\n        dispatch(changeTimerValue(value));\n    }\n\n    useEffect(() => {\n        \n    }, [sliderValue]);\n\n    return (\n        <View\n            style={styles.container}\n        >\n            <Slider\n                style={{width: 200, height: 40}}\n                onValueChange={value => changeSliderV(value)}\n                value={sliderValue}\n                step={10}\n                minimumValue={30}\n                maximumValue={180}\n                minimumTrackTintColor=\"#00ADB5\"\n                maximumTrackTintColor=\"#303841\"\n                tapToSeek={true}\n                thumbTintColor={\"#00ADB5\"}\n            />\n            <Text style={styles.text}>{sliderValue} seconds</Text>\n        </View>\n    )\n}\n\nexport default TimerSlider;\n\nconst styles = StyleSheet.create({\n    container:{\n        marginTop: 10,\n    },\n    text:{\n        fontFamily: 'RobotoMono_100Thin',\n        color: \"white\",\n    },\n})","import { StyleSheet, Text, View, CheckBox} from 'react-native'\nimport React from 'react'\nimport {useState} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport TimerSlider from './TimerSlider';\nimport { changeTimer } from '../redux/redux';\n\nconst CheckboxTimer = () => {\n\n  const [isChecked, setIsChecked] = useState(useSelector(state => state.timer));\n\n  const dispatch = useDispatch();\n  const updateTimer = () => {\n    setIsChecked(!isChecked);\n    dispatch(changeTimer());\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>set timer</Text>\n      <CheckBox\n        value={isChecked}\n        onValueChange={() => updateTimer()}\n        style={styles.checkbox}\n      />\n      {isChecked ? <TimerSlider /> : null}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container:{\n    marginTop: 50,\n    width: 200,\n  },\n  text:{\n      fontFamily: 'RobotoMono_100Thin',\n      color: \"white\",\n      marginBottom: 10,\n  },\n  checkbox:{\n    width: 20,\n    height: 20,\n  }\n})\n\nexport default CheckboxTimer;","import { Dimensions, StyleSheet, Text, View } from 'react-native'\nimport React from 'react'\nimport Modal from \"react-native-modal\";\nimport Ionicons from 'react-native-vector-icons/Ionicons';\nimport { TouchableOpacity } from 'react-native-web';\nimport ModalSlider from './ModalSlider';\nimport RadioButtons from './RadioButtons';\nimport CheckboxTimer from './CheckboxTimer';\n\nconst ModalScreen = (props) => {\n\n    const toggleModalChild = () => {\n        props.toggleModal(false);\n    }\n\n  return (\n      <Modal\n        isVisible={props.visibility}\n        style={styles.modalContainer}\n      >\n          <View style={styles.nestedView}>\n                <TouchableOpacity\n                    style={styles.closeButton}\n                    onPress={() => toggleModalChild()}\n                >\n                    <Ionicons name={\"close\"} size={16} color=\"white\" />\n                </TouchableOpacity>\n\n                <ModalSlider />\n                <RadioButtons />\n                <CheckboxTimer />\n          </View>\n      </Modal>\n  )\n}\n\nconst styles = StyleSheet.create({\n    nestedView:{\n        position: \"absolute\",\n        left: 0,\n        width: Dimensions.get('window').width * 0.15,\n        height: Dimensions.get('window').height * 0.8,\n        borderRadius: 15,\n        backgroundColor: \"#3A4750\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n    },\n    closeButton:{\n        position: \"absolute\",\n        top: 10,\n        right: 10,\n    }\n})\n\nexport default ModalScreen;","import { StyleSheet, Text, View, TouchableOpacity, Dimensions } from 'react-native';\nimport React, { useState } from 'react';\nimport Ionicons from 'react-native-vector-icons/Ionicons';\nimport ModalScreen from './ModalScreen';\n\nconst ToggleModalButton = () => {\n\n  const [visibility, setVisibility] = useState(false);\n\n  const toggleModal = () => {\n    setVisibility(!visibility);\n  }\n\n  return (\n    <View style={styles.container}>\n      <ModalScreen visibility={visibility} toggleModal={setVisibility}/>\n      <TouchableOpacity\n          onPress={()=> toggleModal()}\n          style={styles.toggleModalButton}\n      >\n        <Ionicons name={\"settings\"} size={24} color={\"white\"}/>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n    container:{\n        position: \"absolute\",\n        left: 0,\n        width: Dimensions.get('window').width * 0.15,\n        height: Dimensions.get('window').height,\n        zIndex: 99,\n    },\n    toggleModalButton:{\n      opacity: 0.6,\n      position: \"absolute\",\n      left: 20,\n      bottom: 20,\n    }\n});\n\nexport default ToggleModalButton;\n","import { StyleSheet, Text, View } from 'react-native'\nimport React from 'react';\nimport ToggleModalButton from './ToggleModalButton';\nimport { useSelector } from 'react-redux';\n\nexport default function Finished() {\n  return (\n    <View\n            style={styles.container}\n        >   \n            <View style={styles.wordsContainer}>\n                <Text style={styles.text}>press SPACEBAR to restart</Text>\n                <Text style={styles.text}>WPM: {useSelector(state => state.wpm)}</Text>\n            </View>\n            \n            <ToggleModalButton style={{zIndex: 99}}/>\n        </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n    container:{\n        flex: 1,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        backgroundColor: \"#303841\",\n        width: \"100%\",\n        height: \"100%\",\n    },\n    text:{\n        color: \"#EEEEEE\",\n        fontWeight: 500,\n        fontFamily: 'RobotoMono_100Thin',\n    },\n    wordsContainer:{\n        width: \"80%\",\n        alignItems: \"center\",\n        marginVertical: 5,\n    },\n})","import { StyleSheet, Text, View } from 'react-native';\nimport React, { useEffect, useState} from 'react';\nimport AppLoading from 'expo-app-loading';\nimport { useFonts, RobotoMono_100Thin } from '@expo-google-fonts/roboto-mono';\nimport keyListener from '../hooks/keyListener';\nimport Information from './Information';\nimport ToggleModalButton from './ToggleModalButton';\nimport Finished from './Finished';\n\nimport {useSelector, useDispatch} from 'react-redux'\n\nimport { changeWpm, incrementErrors } from '../redux/redux';\n\nconst TypingTest = () => {\n    let initalArr = [''];\n    const [text, setText] = useState('');\n    const [randomWords, setRandomWords] = useState(initalArr);\n    const [isReady, setIsReady] = useState(false);\n    const [counter, setCounter] = useState(0);\n    const [totalCounter, setTotalCounter] = useState(0);\n    const [underline, setUnderline] = useState(true);\n    const [hasStarted, setHasStarted] = useState(false);\n\n    const [currentChar, setCurrentChar] = useState('');\n    const [errors, setErrors] = useState(useSelector(state => state.errors));\n    const [wpm, setWpm] = useState(useSelector(state => state.wpm));\n    const [typedWords, setTypedWords] = useState(0);\n    const [hasFinished, setHasFinished] = useState(false);\n    const timer = useSelector(state => state.timer);\n\n    const initialTimerValue = useSelector(state => state.timerValue);\n    const [timerValue, setCountdownTimer] = useState(initialTimerValue);\n\n    const numberOfWords = useSelector(state => state.sliderValue);\n    const language = useSelector(state => state.language);\n    const fetchString = \"https://random-word-api.herokuapp.com/word?number=\"+numberOfWords+\"&lang=\"+language;\n    console.log(numberOfWords);\n\n    const dispatch = useDispatch()\n\n    const getData = () => {\n        fetch(fetchString, {mode: 'cors'})\n        .then(response => response.json())\n        .then(data => setRandomWords(data))\n        .then(setIsReady(true));\n    }\n\n    const getCurrentChar = () => {\n        setCurrentChar(randomWords[0].charAt(0));\n    }\n\n    let [fontsLoaded] = useFonts({\n        RobotoMono_100Thin,\n    });\n\n    useEffect(() => {\n        getData();\n    }, [numberOfWords, hasFinished, language, hasStarted, initialTimerValue]);\n\n    useEffect(() => {\n        let interval;\n\n        interval = setInterval(() => {\n            setCounter(counter => counter+1);\n            setUnderline(!underline);\n        }, 200)\n\n        return (() => clearInterval(interval));\n    }, [counter]);\n\n    useEffect(() => {\n        let interval2;\n\n        if(hasStarted){\n            interval2 = setInterval(() => {\n                setTotalCounter(totalCounter => totalCounter+1);\n                console.log(totalCounter);\n                if(totalCounter > 3 && !hasFinished){\n                    let tempWpm = Math.floor(typedWords/(totalCounter/60));\n                    setWpm(tempWpm);\n                    dispatch(changeWpm(tempWpm));\n                }\n            }, 1000)\n        }\n\n        return (() => clearInterval(interval2));\n    }, [totalCounter, hasStarted])\n\n    useEffect(() => {\n        let interval3;\n\n        if(hasStarted && timer){\n            interval3 = setInterval(() => {\n                setCountdownTimer(timerValue => timerValue-1)\n                if(timerValue == 0){\n                    setHasFinished(true);\n                }\n            }, 1000)\n        }\n\n        return (() => clearInterval(interval3));\n    }, [timerValue, hasStarted])\n\n    useEffect(() => {\n        setCountdownTimer(initialTimerValue)\n    }, [timer, initialTimerValue]);\n\n    useEffect(() => {\n\n        getCurrentChar();\n        \n    }, [fontsLoaded, isReady, currentChar, randomWords]);\n\n    keyListener(key => {\n\n        if(key === \" \"){\n            setHasFinished(false);\n            setHasStarted(false);\n            //getData();\n            setCountdownTimer(initialTimerValue);\n        }\n\n        if(key == \"Backspace\"){\n            setText(text.slice(0, -1));\n        }else{\n            setText(text+key);\n        }\n        console.log(key);\n        if(currentChar == key && key!=\" \" && randomWords.length != 0 && !hasFinished){\n            setHasStarted(true);\n            randomWords[0] = randomWords[0].substring(1);\n            if(randomWords[0].length == 0){\n                setTypedWords(typedWords => typedWords+1);\n                randomWords.shift()\n                getNewWord();\n                if(randomWords.length == 0){\n                    setHasFinished(true);\n                }\n                getCurrentChar();\n            }else{\n                getCurrentChar();\n            }\n        }else if(key != \" \"){\n            setErrors(errors => errors + 1);\n            dispatch(incrementErrors());\n        }\n    });\n    if(!hasFinished){\n    return (\n        <View\n        \n            style={styles.container}\n        >   \n            <Information errors={errors} wpm={wpm}/>\n            {timer ? <Text style={styles.timerValue}>time left: {timerValue}</Text> : null}\n            <View style={styles.wordsContainer}>\n                {randomWords.slice(0, 15).map((item, index) => {\n                    if(index == 0){\n                        return(\n                            <View style={styles.firstWord}>\n                                <Text\n                                    style={\n                                        underline\n                                        ? {color: \"white\", fontWeight: 500, fontFamily: 'RobotoMono_100Thin', marginHorizontal: -5,textDecoration: 'underline'}\n                                        : {color: \"white\", fontWeight: 500, fontFamily: 'RobotoMono_100Thin', marginHorizontal: -5}}>\n                                            {currentChar}\n                                </Text>\n                                <Text style={styles.words}>{item.substring(1)}</Text>\n                            </View>\n                        )\n                    }\n                    else{\n                        return(<Text style={styles.words}>{item}</Text>)\n                    }\n                })}\n            </View>\n            <View style={styles.wordsContainer}>\n                {randomWords.slice(15, 30).map((item) => {\n                    return(<Text style={styles.words}>{item}</Text>)\n                })}\n            </View>\n            \n            <ToggleModalButton style={{zIndex: 99}}/>\n        </View>\n    );\n    }else{\n        return(\n            <Finished />\n        );\n    }\n}\n\nconst styles = StyleSheet.create({\n    container:{\n        flex: 1,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        backgroundColor: \"#303841\",\n        width: \"100%\",\n        height: \"100%\",\n    },\n    text:{\n        color: \"#EEEEEE\",\n        fontWeight: 500,\n        fontFamily: 'RobotoMono_100Thin',\n        borderRightColor: \"white\",\n        borderWidth: 1,\n    },\n    wordsContainer:{\n        width: \"80%\",\n        justifyContent: \"space-evenly\",\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        marginVertical: 5,\n    },\n    words:{\n        color: \"white\",\n        fontWeight: 500,\n        fontFamily: 'RobotoMono_100Thin',\n        marginHorizontal: 5,\n    },\n    timerValue:{\n        color: \"white\",\n        fontWeight: 500,\n        fontFamily: 'RobotoMono_100Thin',\n        marginBottom: 25,\n        fontSize: 16,\n    },\n    textinput:{\n        width: 500\n    },\n    firstWord:{\n        flexDirection: \"row\",\n    }\n});\n\n\nexport default TypingTest;","import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport TypingTest from './components/TypingTest';\nimport store from './redux/redux';\nimport { Provider } from 'react-redux';\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <TypingTest />\n    </Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}